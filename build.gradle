buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath 'org.ajoberstar:gradle-git:1.3.2'
    classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    classpath 'net.nemerosa:versioning:2.1.0'
  }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'

repositories {
  jcenter()
}

sourceCompatibility=1.7
targetCompatibility=1.7

dependencies {
  compile 'io.reactivex:rxjava:1.0.14'
  compile 'io.dropwizard.metrics:metrics-core:3.1.2'
  compile 'com.google.guava:guava:18.0'
  compile 'joda-time:joda-time:2.3'

  testCompile 'org.hamcrest:hamcrest-library:1.3'
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar) {
  group 'Build'
  description 'An archive of the source code'
  classifier 'sources'
  from sourceSets.main.allSource
}

jar.finalizedBy sourcesJar

artifacts {
  sourcesJar
}

gradle.taskGraph.whenReady {
  def createIfNotExists = { File dir ->
    if (!dir.exists()) {
      dir.mkdirs()
    }
  }

  String sourceSetName = project.plugins.hasPlugin('groovy') ? 'groovy' : 'java'
  sourceSets.main[sourceSetName].srcDirs.each(createIfNotExists)
  sourceSets.test[sourceSetName].srcDirs.each(createIfNotExists)
  sourceSets.main.resources.srcDirs.each(createIfNotExists)
  sourceSets.test.resources.srcDirs.each(createIfNotExists)
}

